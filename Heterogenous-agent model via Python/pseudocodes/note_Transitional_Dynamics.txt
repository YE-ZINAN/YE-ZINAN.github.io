Transition dynamics to steady state, no aggregate uncertainty, aggregate capital in value function

…
f_init = initial_distribution(t=1)
Set function law_of_motion: ln(y) = y0 + y1 * ln(x)
y0 = initial_guess_constant
y1 = initial_guess_parameter
Va_init = Matrix(ne, na, nK)
T = 3500
OLS_window = 1500
For i in max_iteration_steps:
	f_path = Matrix(T, ne, na)
f_path[1] = f_init
	K_path = Vector(T)
	K_path[1] = Aggregator(f_init)
Va_ss, a_ss, c_ss = steady_state_policy(Va_init, law_of_motion)
For t from 2 to T:
	f_path[t] = forward_iteration(a_ss(K_path[t-1]), f_path[t-1],)
	K_path[t] = Aggregator(f_path[t], a_space)
r2, y0_new, y1_new = OLS( y = K_path[2 to 2+OLS_window], x = K_path[1 to 1+OLS_window])
	if max(y0_new – y0, y1_new – y1) < 1E-5:
		Check r2
		Break
	else:
		v = 0.2
		y0 = v * y0_new + (1-v) * y0
		y1 = v * y1_new + (1-v) * y1
		Update function law_of_motion: ln(y) = y0 + y1 * ln(x)
